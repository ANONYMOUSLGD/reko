// fn0C00_0000 /////////////////////
	LiveOut:  
	BitsUsed:  ds:[0..15]
	Trashed:   SCZO ax bx cx di es Top
	Preserved: sp
// fn0C00_0000
define fn0C00_0000
fn0C00_0000_entry:
	def ds
l0C00_0000:
	call fn0C00_000C (retsize: 2;)
		uses: ds:ds
		defs: bx:bx_6,cx:cx_7
	cl_15 = SLICE(cx_7, byte, 0) (alias)
	Mem14[ds:0x300<16>:word16] = bx_6
	Mem16[ds:0x302<16>:byte] = cl_15
	return
fn0C00_0000_exit:
// fn0C00_000C /////////////////////
	LiveOut:   bx:[0..15] cx:[0..7]
	BitsUsed:  ds:[0..15]
	Trashed:   SCZO ax bx cx di es Top
	Preserved: sp
// fn0C00_000C
define fn0C00_000C
fn0C00_000C_entry:
	def ds
	def Mem0
l0C00_000C:
	di_7 = 0x7E0F<16>
	cx_8 = 0xC<16>
<<<<<<< HEAD
	v17_41 = true
=======
	v18_43 = 0<8> == 0<8>
>>>>>>> WIP: overflow flag in X86 #939
l0C00_0019:
	v20_45 = PHI((v18_43, l0C00_000C), (v19_44, l0C00_0019_1))
	di_16 = PHI((di_7, l0C00_000C), (di_19, l0C00_0019_1))
	cx_13 = PHI((cx_8, l0C00_000C), (cx_20, l0C00_0019_1))
	ch_57 = SLICE(cx_13, byte, 8) (alias)
	branch cx_13 == 0<16> l0C00_001B
l0C00_0019_1:
	v19_44 = Mem0[ds:di_16:byte] == 0<8>
	di_19 = di_16 + 1<i16>
	cx_20 = cx_13 - 1<16>
	ch_58 = SLICE(cx_20, byte, 8) (alias)
	branch Mem0[ds:di_16:byte] != 0<8> l0C00_0019
l0C00_001B:
	ch_56 = PHI((ch_57, l0C00_0019), (ch_58, l0C00_0019_1))
	di_32 = PHI((di_16, l0C00_0019), (di_19, l0C00_0019_1))
	v21_46 = PHI((v20_45, l0C00_0019), (v19_44, l0C00_0019_1))
	branch v21_46 l0C00_002D
l0C00_001D:
	ah_34 = Mem0[ds:di_32 + 1<16>:byte]
	ax_36 = SEQ(ah_34, 0<8>) (alias)
	cx_37 = __bsr(ax_36)
	cx_38 = cx_37 - 8<16>
	bx_40 = di_32 - 0x7E03<16>
	return
l0C00_002D:
	bx_25 = 0<16>
	cx_59 = SEQ(ch_56, 0<8>) (alias)
	return
fn0C00_000C_exit:
	cx_55 = PHI((cx_38, l0C00_001D), (cx_59, l0C00_002D))
	bx_52 = PHI((bx_40, l0C00_001D), (bx_25, l0C00_002D))
	use bx_52
	use cx_55
